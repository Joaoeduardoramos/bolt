/* ------------------------------------ *\
  Settings
\* ------------------------------------ */
@import '@bolt/settings-all';
@import '@bolt/tools-all';
@import '@bolt/generic-all';
@import '@bolt/elements-all';
@import '@bolt/objects-all';
@import '@bolt/components-all';
@import '@bolt/themes-all';
@import '@bolt/utilities-all';



/* ------------------------------------ *\
   Pattern Lab Styleguidekit Style
   Overrides -- @TODO: Move to
   external PL-specific Sass file
\* ------------------------------------ */
.sg-main {
  @include bolt-padding(medium);
}

// Demo custom element to show off theming
bolt-demo {
  @include bolt-padding(medium);
  display: block;
}


/* ------------------------------------ *\
   Custom elements
\* ------------------------------------ */

// Post-processing after all custom elements have been added.
// @TODO: figure out how best to collect these dynamically but still add to the generic layer when we need these to be included.
@each $bolt-custom-element-item in $_bolt-custom-block-elements {
  $bolt-all-custom-block-elements: append($bolt-all-custom-block-elements, unquote($bolt-custom-element-item), comma);
}

@each $bolt-custom-element-item in $_bolt-custom-inline-block-elements {
  $bolt-all-custom-inline-block-elements: append($bolt-all-custom-inline-block-elements, unquote($bolt-custom-element-item), comma) !global;
}

@each $bolt-custom-element-item in $_bolt-custom-inline-elements {
  $bolt-all-custom-inline-elements: append($bolt-all-custom-inline-elements, unquote($bolt-custom-element-item), comma) !global;
}


// Example of adding global generic styles to all custom elements.
@if length($bolt-all-custom-block-elements) > 0 {
  #{$bolt-all-custom-block-elements} {
    @include bolt-margin-bottom(medium);
    display: block;
  }
}

@if length($bolt-all-custom-inline-block-elements) > 0 {
  #{$bolt-all-custom-inline-block-elements} {
    display: inline-block;
    display: inline-flex;
  }
}

@if length($bolt-all-custom-inline-elements) > 0 {
  #{$bolt-all-custom-inline-elements} {
    display: inline;
  }
}



/*
 * SHAME
 */

// Workaround Brightcove Video Player's Hapyak CSS in a ratio component
bolt-ratio .hapyak-player:not(.hapyak-minimal-css) {
  position: absolute !important;
}



// // color map
// $color: (
//   text: #222,
//   background: #FFF,
// );

// // font map
// $font: (
//   family: (
//     body: (Merriweather, Georgia, serif),
//     head: (Roboto, Helvetica, sans-serif)
//   ),
//   weight: (
//     body: 300,
//     head: 300,
//   ),
//   size: (
//     body: 18px,
//     h1: 2.4em,
//     h2: 2em,
//     h3: 1.6em,
//     h4: 1.4em,
//   ),
//   leading: (
//     body: 1.7,
//     head: 1.2,
//   )
// );

// // associate variable map name to an actual variable map
// $var-maps: (
//   color: $bolt-colors,
//   font:  $font
// );

// // which property uses which var map
// // you would edit this for each property you want to use variables for
// $props: (
//   background-color: color,
//   color:            color,
//   font-family:      (font, family),
//   font-size:        (font, size),
//   font-weight:      (font, weight),
//   line-height:      (font, leading),
// );



// // the variable mixin takes a property and variable name
// @mixin bolt-var($prop, $var, $show-fall: true) {
//   // get the property's map name(s)
//   $map-name: map-get($props, $prop);
//   $nest-name: null;
//   $nest-map-name: null;
//   $map: null;
//   $var-fall: null;
//   $var-output: null;
//   // if a list, we need to go deeper
//   @if type-of($map-name) == list {
//     $nest-name: nth($map-name, 1);
//     $nest-map-name: nth($map-name, 2);
//   }
//   // if it is a nested map
//   @if $nest-name {
//     // get the map from nested map-name
//     $map: map-get($var-maps, $nest-name);
//     // get the nested map

//     // @if (str-index($map, bolt)) {
//     //   @debug 'bolt-map';
//     // } @else {
//     //   @debug 'nope';
//     // }

//     $nest-map: map-get($map, $nest-map-name);
//     // get the var value fro mthe nested map
//     $var-fall: map-get($nest-map, $var);
//     $var-output: var(--#{$nest-name}-#{$nest-map-name}-#{$var});
//   } @else {
//     // get the map from map name
//     $map: map-get($var-maps, $map-name);
//     // fallback, grab the variable's value from the map
//     $var-fall: map-get($map, $var);
//     $var-output: var(--bolt-#{$map-name}#{$var});
//   }
//   // if show standard is not overridden to be null
//   @if $show-fall {
//     #{$prop}: $var-fall;
//   }
//   // css4 variable output
//   #{$prop}: $var-output;
// }




// // setup the css4 variable definitions
// :root {
//   // for each variable map
//   @each $var-map-name, $var-map in $var-maps {
//     // for each variable in the variable map
//     @each $var, $val in $var-map {
//       // if it is a map, go another level deep
//       @if type-of($val) == map {
//         // each in the map
//         @each $var-n, $val-n in $val {
//           // do the definition
//           #{--bolt-$var-map-name}-#{$var}-#{$var-n}: $val-n;
//         }
//       } @else {
//         // do the definition
//         #{--bolt-$var-map-name}-#{$var}: $val;
//       }
//     }
//   }
// }


// // using it is magical

// body {
//   // @include v(font-size, body);
//   // @include v(font-family, body);
//   // @include v(font-weight, body);
//   // @include v(line-height, body);
//   @include bolt-var(background-color, bolt-color(teal));

//   // color it red if no CSS4 variables
//   color: red;
//   // override "show standard" with "null" which means no CSS4 support will still be red
//   // if we didn't do this, it would create the fallback.
//   // @include v(color, text, null);
// }

// // h1, h2, h3, h4 {
// //   @include v(line-height, head);
// //   @include v(font-family, head);
// //   @include v(font-weight, head);
// // }

// // h1 { @include v(font-size, h1); }
// // h2 { @include v(font-size, h2); }
// // h3 { @include v(font-size, h3); }
// // h4 { @include v(font-size, h4); }


// .c-test-card {
//   @include bolt-var(background-color, bolt-color(indigo, dark));
//   // @include var(background-color, )
// }



/* ------------------------------------ *\
   Form Sandbox
\* ------------------------------------ */

.c-bolt-form {
  display: block;
}




.c-bolt-fieldset {
  display: block;
  border: none;
}

.c-bolt-fieldset__legend {
  @include bolt-margin(0 0 xsmall 0);

  display: block;
}

.c-bolt-fieldset__items {
  @include bolt-margin(0);
  @include bolt-padding(0);
}

.c-bolt-fieldset__item {
  @include bolt-margin(0 0 small 0);
  @include bolt-padding(0);

  display: block;
  position: relative;

  &:last-child {
    @include bolt-margin-bottom(0);
  }
}




$bolt-input-label-text-color: bolt-color(indigo, light);
$bolt-input-label-text-indent: bolt-spacing(small);

.c-bolt-input-label {
  @include bolt-font-size(xsmall);

  position: absolute;
  top: 0.45rem;
  left: $bolt-input-label-text-indent;
  max-width: calc(100% - #{$bolt-input-label-text-indent * 2});
  overflow: hidden;
  color: $bolt-input-label-text-color;
  line-height: 1;
  white-space: nowrap;
  text-overflow: ellipsis;
  opacity: 0;
  transform: translate3d(0, -15%, 0) scale(0.8);
  transform-origin: 0 100%;
  transition: all $bolt-transition;
}




$bolt-input-field-text-color: bolt-color(gray, xdark); // TODO: [Mai] This is the theme text color
$bolt-input-field-text-color--invalid: bolt-color(error); // TODO: [Mai] This is the theme error color
$bolt-input-field-text-color--disabled: bolt-color(gray); // TODO: [Mai] This is the theme disabled color
$bolt-input-field-background-color: bolt-color(white); // TODO: [Mai] This is the theme input background color
$bolt-input-field-placeholder-color: rgba(bolt-color(gray, xdark), 0.66); // TODO: [Mai] This is the theme text color at 66%
$bolt-input-field-placeholder-color--invalid: rgba(bolt-color(error), 0.66); // TODO: [Mai] This is the theme error color at 66%
$bolt-input-field-border-color: rgba(bolt-color(indigo, light), 0.25); // TODO: [Mai] This is the theme link color at 25%
$bolt-input-field-border-color--focus: bolt-color(indigo, light); // TODO: [Mai] This is the theme link color
$bolt-input-field-border-color--invalid: rgba(bolt-color(error), 0.25); // TODO: [Mai] This is the theme error color at 25%
$bolt-input-field-border-width: $bolt-border-width;
$bolt-input-field-border-style: $bolt-border-style;
$bolt-input-field-border-radius: $bolt-border-radius;
$bolt-input-field-box-shadow--focus: 0 0 0.35rem bolt-color(indigo, light);
$bolt-input-field-transition: $bolt-transition;

@mixin bolt-input-field-placeholder($color) {
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $color;
  }

  &::-moz-placeholder { /* Firefox 19+ */
    color: $color;
  }

  &:-ms-input-placeholder { /* IE 10+ */
    color: $color;
  }

  &:-moz-placeholder { /* Firefox 18- */
    color: $color;
  }
}

.c-bolt-input-field {
  @include bolt-padding(small);
  @include bolt-font-size(small);
  @include bolt-input-field-placeholder($bolt-input-field-placeholder-color);

  display: block;
  width: 100%;
  color: $bolt-input-field-text-color;
  border-color: $bolt-input-field-border-color;
  border-style: $bolt-input-field-border-style;
  border-width: $bolt-input-field-border-width;
  border-radius: $bolt-input-field-border-radius;
  background-color: $bolt-input-field-background-color;
  transition: all $bolt-input-field-transition;

  &.is-invalid,
  &.is-touched:invalid {
    @include bolt-input-field-placeholder($bolt-input-field-placeholder-color--invalid);

    color: $bolt-input-field-text-color--invalid;
    border-color: $bolt-input-field-border-color--invalid;

    & ~ .c-bolt-input-message--error {
      display: block;
    }
  }

  &.is-disabled,
  &:disabled {
    color: $bolt-input-field-text-color--disabled;
    cursor: not-allowed;
  }

  &.is-filled,
  &:focus {
    padding-top: calc(#{bolt-v-spacing(small)} + 0.45rem);
    padding-bottom: calc(#{bolt-v-spacing(small)} - 0.45rem);

    & + .c-bolt-input-label {
      opacity: 1;
      transform: translate3d(0, 0, 0) scale(1);
    }
  }

  &:focus {
    border-color: $bolt-input-field-border-color--focus;
    box-shadow: $bolt-input-field-box-shadow--focus;
    outline: none;
  }
}




$bolt-input-message-color--error: bolt-color(error); // TODO: [Mai] This is the theme error color

.c-bolt-input-message {
  @include bolt-padding(small, squished);

  display: none;
}

.c-bolt-input-message--error {
  color: $bolt-input-message-color--error;
}
