@import './constants';
@import './helpers';
@import '../../02-tools/tools-text-contrast/tools-text-contrast';


// $bolt-global-default-theme: 'xlight';


// pre-defined theming system values
$bolt-theme-ui-colors: (
  light: (
    border: rgba(bolt-color(white), 0.2),
    contrast-filter: grayscale(100%) invert(100%) brightness(150%),
    disabled: bolt-color(gray, light),
    headline-link: bolt-color(white),
    headline: bolt-color(white),
    link: bolt-color(yellow),
    primary: bolt-color(yellow),
    secondary: bolt-color(white),
    text-disabled: bolt-color(gray),
    text: bolt-color(white),
  ),
  dark: (
    border: rgba(bolt-color(indigo, dark), 0.2),
    contrast-filter: none,
    disabled: bolt-color(gray, light),
    headline-link: bolt-color(indigo, light),
    headline: bolt-color(indigo),
    link: bolt-color(indigo, light),
    primary: bolt-color(indigo, light),
    secondary: bolt-color(white),
    text-disabled: bolt-color(gray),
    text: bolt-color(black),
  ),
) !default;


$bolt-theme-interactive-ui: (
  primary,
  secondary
) !default;

$bolt-theme-interactive-shades: (
  default: (0),
  lighten: (5, 15, 25),
  darken: (5, 15, 25)
) !default;


$bolt-themes: (
  xlight: (
    background: bolt-color(white),
  ),
  light: (
    background: bolt-color(gray, xlight),
  ),
  dark: (
    background: bolt-color(indigo),
  ),
  xdark: (
    background: bolt-color(indigo, dark),
  ),
);



// combine the two sets of theming system data and calculate the dynamic values
@each $themeName, $themeProps in $bolt-themes {
  $background: map-get($themeProps, background);

  $lightOrDark: bolt-theme-contrast-tone($background);
  $bolt-ui-colors: map-get($bolt-theme-ui-colors, $lightOrDark);

  $bolt-themes: bolt-recursive-map-merge(
    $bolt-themes,
      (
        #{$themeName}: $bolt-ui-colors
      )
  );


  @each $element in $bolt-theme-interactive-ui {
    @each $name, $shades in $bolt-theme-interactive-shades {
      @each $shade in $shades {
        $mixColor: bolt-color(black);
        $displayName: '';
        $displayShadeName: '';
        $propValue: '';

        @if $name == 'lighten' {
          $mixColor: bolt-color(white);
        }

        // add dash to name of property, unless it's the first "default" one
        @if ($name != 'default'){
          $displayName: '-#{$name}';
        }

        // add dash to name of property, unless it's the first "default" one
        @if ($shade != 0){
          $displayShadeName: '-#{$shade}';
        }


        $propName: #{$element}#{$displayName}#{$displayShadeName};
        $property: map-get-deep($bolt-themes, $themeName, $element);

        $propValue: mix($mixColor, $property, $shade);

        $bolt-themes: bolt-recursive-map-merge(
          $bolt-themes, (
            #{$themeName}: (
              $propName: $propValue,
              text-on-#{$propName}: bolt-text-contrast($propValue),
            )
          )
        );
      }
    }
  }
}


// Deprecated -- will be removed in Bolt v2.0
$bolt-themes: bolt-recursive-map-merge(
  $bolt-themes,
    (
      medium: map-get($bolt-themes, light)
    )
);


$bolt-themes-export: ();

@each $themeName, $themeOptions in $bolt-themes {
  @each $themeOptionName, $themeOptionValue in $themeOptions {
    @if type-of($themeOptionValue) == color {
      $bolt-themes-export: map-set-deep($bolt-themes-export, ($themeName, $themeOptionName), rgba($themeOptionValue, 1));
    }
  }
}

@include bolt-export-data($bolt-css-vars-json-data-export + '.json', $bolt-themes-export);
@include bolt-export-data('theming.bolt.json', $bolt-themes);

