@import '@bolt/core';
@import '@bolt/global/styles/06-themes/_themes.all.scss';

/* ------------------------------------ *\
   Modal
   ---
   Based originally off of
   https://github.com/edenspiekermann/a11y-dialog
   before heavy modifications
   and customizations
\* ------------------------------------ */

/**
 * When `<dialog>` is properly supported, the overlay is implied and can be
 * styled with `::backdrop`, which means the DOM one should be removed.
 */
/*
[data-a11y-dialog-native] .dialog-overlay {
  @todo: look further into this to see why the natively supported ::backdrop wasn't showing up as expected
  display: none;
}

dialog::backdrop {
  background-color: rgba(0, 0, 0, 0.66);
}
*/

$bolt-modal-overlay-bg-color: rgba(bolt-color(black), bolt-opacity(80));
$bolt-modal-border-width: $bolt-border-width;
$bolt-modal-border-style: $bolt-border-style;
$bolt-modal-border-color: bolt-theme(text, 0.15);
$bolt-modal-border-radius: bolt-border-radius(small);
$bolt-modal-max-height: 80vh;
$bolt-modal-transition: $bolt-transition;

// Hide all the non-trigger (button / link, etc) content inside the <bolt-modal> container before the JS kicks in
bolt-modal:not([ready]) {
  display: none;
}

.c-bolt-modal {
  display: inline;
}

// Dark overlay
.c-bolt-modal__overlay {
  @include bolt-z-index(modalBG);

  display: block;
  opacity: 0;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: $bolt-modal-overlay-bg-color;
  transition: opacity $bolt-modal-transition;

  @at-root .c-bolt-modal.is-open #{&} {
    opacity: 1;
    cursor: pointer;
    pointer-events: auto;
  }

  @at-root .c-bolt-modal.is-open #{&}--persistent {
    cursor: auto;
  }
}


// Content box
.c-bolt-modal__content {
  @include bolt-z-index(modal);

  display: block;
  visibility: hidden;
  opacity: 0;
  position: fixed;
  top: 0;
  left: 0;
  min-width: 200px; // Prevents content without defined width (such as image and video) from falling below 200px.
  max-width: calc(100% - #{bolt-spacing(small) * 2});
  max-height: $bolt-modal-max-height;
  margin: 0;
  padding: 0;
  border: 0;
  background: transparent;
  transition: all $bolt-modal-transition;

  @include bolt-mq(xsmall) {
    max-width: calc(100% - #{bolt-spacing(medium) * 2});
  }
}

// Scroll options
.c-bolt-modal--scroll-overall {
  @include bolt-z-index(modalBG);

  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  pointer-events: none;

  .c-bolt-modal__content {
    @include bolt-margin(0 auto);

    position: relative;
    top: 50vh;
    transform: translateX(0) translateY(-50%) scale(0.95);
  }

  &.is-open {
    pointer-events: auto;

    .c-bolt-modal__content {
      visibility: visible;
      opacity: 1;
      transform: translateX(0) translateY(calc(-50% - 0.5px)) translateZ(0);
      filter: blur(0);
    }
  }
}

.c-bolt-modal--scroll-container {
  .c-bolt-modal__content {
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%) scale(0.95);
  }

  &.is-open {
    .c-bolt-modal__content {
      visibility: visible;
      opacity: 1;
      transform: translateX(calc(-50% - 0.5px)) translateY(calc(-50% - 0.5px)) translateZ(0);
      filter: blur(0);
    }
  }

  .c-bolt-modal__container-body {
    max-height: calc(#{$bolt-modal-max-height} - 6rem);
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
}

// Content width options
[class*='c-bolt-modal__content--width-'] {
  width: calc(100% - #{bolt-spacing(small) * 2});
}

@include bolt-mq(xsmall) {
  .c-bolt-modal__content--width-regular {
    width: 100% / 12 * 10;
  }

  .c-bolt-modal__content--width-optimal {
    width: 75ch;
  }

  .c-bolt-modal__content--width-full {
    width: calc(100% - #{bolt-spacing(medium) * 2});
  }
}

// Container
.c-bolt-modal__container {
  display: block;
  border-radius: $bolt-modal-border-radius;
}

.c-bolt-modal__container-header,
.c-bolt-modal__container-footer,
.c-bolt-modal__container-body {
  display: block;
}

.c-bolt-modal__container-header,
.c-bolt-modal__container-footer,
.c-bolt-modal__container-body {
  ::slotted(*:last-child),
  ::slotted(*.is-last-child) {
    margin-bottom: 0 !important;
  }
}

.c-bolt-modal__container-header {
  border-bottom: $bolt-modal-border-width $bolt-modal-border-style
    $bolt-modal-border-color;
}

.c-bolt-modal__container-footer {
  border-top: $bolt-modal-border-width $bolt-modal-border-style
    $bolt-modal-border-color;
}

// Container spacing options
[class*='c-bolt-modal__container--spacing-'] {
  .c-bolt-modal__container-body {
    @include bolt-padding(small);
  }

  .c-bolt-modal__container-header,
  .c-bolt-modal__container-footer {
    @include bolt-padding(small, squished);
  }
}

@each $spacing-value in $bolt-spacing-values {
  $spacing-value-name: nth($spacing-value, 1);

  @include bolt-mq(xsmall) {
    .c-bolt-modal__container--spacing-#{$spacing-value-name} {
      .c-bolt-modal__container-body {
        @include bolt-padding(#{$spacing-value-name});
      }

      .c-bolt-modal__container-header,
      .c-bolt-modal__container-footer {
        @include bolt-padding(#{$spacing-value-name}, squished);
      }
    }
  }
}

// Controls
.c-bolt-modal__close-button {
  @include bolt-z-index(modal);

  position: absolute;
  top: 0;
  right: 0;
  transform: translate3d(50%, -50%, 0);
}

.c-bolt-modal__container-header--hidden,
.c-bolt-modal__close-button--hidden,
.c-bolt-modal__dialog-title {
  @include bolt-visuallyhidden;
}
