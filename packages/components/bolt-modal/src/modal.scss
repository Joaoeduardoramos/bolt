@import '@bolt/core';
@import '@bolt/global/styles/06-themes/_themes.all.scss';

/* ------------------------------------ *\
   Modal
   ---
   Based originally off of
   https://github.com/edenspiekermann/a11y-dialog
   before heavy modifications
   and customizations
\* ------------------------------------ */

/**
 * When `<dialog>` is properly supported, the overlay is implied and can be
 * styled with `::backdrop`, which means the DOM one should be removed.
 */
/*
[data-a11y-dialog-native] .dialog-overlay {
  @todo: look further into this to see why the natively supported ::backdrop wasn't showing up as expected
  display: none;
}

dialog::backdrop {
  background-color: rgba(0, 0, 0, 0.66);
}
*/

$bolt-modal-overlay-bg-color-dark: rgba(
  bolt-color(indigo, xdark),
  bolt-opacity(80)
);
$bolt-modal-overlay-bg-color-light: rgba(bolt-color(white), bolt-opacity(80));
$bolt-modal-border-width: $bolt-border-width;
$bolt-modal-border-style: $bolt-border-style;
$bolt-modal-border-color: bolt-theme(text, 0.15);
$bolt-modal-border-radius: bolt-border-radius(small);
$bolt-modal-max-height: 80vh;
$bolt-modal-transition: $bolt-transition;
$bolt-modal-breakpoint: 'small';

// Hide all the non-trigger (button / link, etc) content inside the <bolt-modal> container before the JS kicks in
bolt-modal:not([ready]) {
  display: none;
}

.c-bolt-modal {
  @include bolt-z-index(modalBG);

  display: block;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  pointer-events: none;

  &.is-open {
    pointer-events: auto;

    &:not(.c-bolt-modal--persistent) {
      @include bolt-mq($bolt-modal-breakpoint) {
        cursor: pointer;
      }
    }
  }

  @include bolt-mq($until: $bolt-modal-breakpoint) {
    visibility: hidden;
    opacity: 0;
    transform: scale(0.95);
    transition: opacity $bolt-modal-transition, transform $bolt-modal-transition;

    [class*='t-bolt-'] {
      color: bolt-color(black);
      background-color: bolt-color(white);
    }

    .c-bolt-modal__overlay {
      display: none;
    }

    .c-bolt-modal__content {
      width: 100%;
    }

    .c-bolt-modal__container {
      display: flex;
      flex-direction: column;
      height: 100vh;
      color: bolt-color(black);
      background-color: bolt-color(white);
    }

    .c-bolt-modal__container-header {
      @include bolt-padding(small large small small);
    }

    .c-bolt-modal__container-header--hidden {
      @include bolt-padding(0);

      height: bolt-v-spacing(medium) + (bolt-v-spacing(small) * 2); // Match close button icon size and margin.
    }

    .c-bolt-modal__container-body {
      @include bolt-margin-top(auto);
      @include bolt-margin-bottom(auto);

      flex: 1;
      height: 100%;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }

    .c-bolt-modal__container-footer {
      @include bolt-padding(small);
    }

    [class*='c-bolt-modal__container--spacing-'] {
      .c-bolt-modal__container-body {
        @include bolt-padding(small);
      }
    }

    &.is-open {
      visibility: visible;
      opacity: 1;
      transform: scale(1);
      filter: blur(0);
    }
  }
}

// Dark overlay
.c-bolt-modal__overlay {
  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-z-index(modalBG);

    display: block;
    opacity: 0;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    pointer-events: none;
    background-color: $bolt-modal-overlay-bg-color-dark;
    transition: opacity $bolt-modal-transition;
  }

  @at-root .c-bolt-modal.is-open #{&} {
    @include bolt-mq($bolt-modal-breakpoint) {
      opacity: 1;
    }
  }
}

.c-bolt-modal__overlay--light {
  @include bolt-mq($bolt-modal-breakpoint) {
    background-color: $bolt-modal-overlay-bg-color-light;
  }
}

// Content box
.c-bolt-modal__content {
  display: block;
  margin: 0;
  padding: 0;
  border: 0;
  background: transparent;

  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-z-index(modal);

    visibility: hidden;
    opacity: 0;
    position: fixed;
    top: 0;
    left: 0;
    min-width: 200px; // Prevents content without defined width (such as image and video) from falling below 200px.
    max-width: calc(100% - #{bolt-spacing(medium) * 2});
    max-height: $bolt-modal-max-height;
    transition: opacity $bolt-modal-transition, transform $bolt-modal-transition;
  }

  @at-root .c-bolt-modal.is-open #{&} {
    @include bolt-mq($bolt-modal-breakpoint) {
      visibility: visible;
      opacity: 1;
      cursor: auto;
      filter: blur(0);
    }
  }
}

// Scroll options
@include bolt-mq($bolt-modal-breakpoint) {
  .c-bolt-modal--scroll-overall {
    @include bolt-z-index(modalBG);

    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    pointer-events: none;

    .c-bolt-modal__content {
      @include bolt-margin(0 auto);

      position: relative;
      top: 50vh;
      transform: translateX(0) translateY(-50%) scale(0.95);
    }

    &.is-open {
      pointer-events: auto;

      .c-bolt-modal__content {
        transform: translateX(0) translateY(calc(-50% - 0.5px)) translateZ(0);
      }
    }
  }

  .c-bolt-modal--scroll-container {
    .c-bolt-modal__content {
      top: 50%;
      left: 50%;
      transform: translateX(-50%) translateY(-50%) scale(0.95);
    }

    &.is-open {
      .c-bolt-modal__content {
        transform: translateX(calc(-50% - 0.5px)) translateY(calc(-50% - 0.5px))
          translateZ(0);
      }
    }

    .c-bolt-modal__container-body {
      max-height: calc(#{$bolt-modal-max-height} - 6rem);
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }
  }
}

// Content width options
@include bolt-mq($bolt-modal-breakpoint) {
  .c-bolt-modal__content--width-optimal {
    width: 75ch;
  }

  .c-bolt-modal__content--width-full {
    width: calc(100% - #{bolt-spacing(medium) * 2});
  }
}

// Container
.c-bolt-modal__container {
  display: block;

  @include bolt-mq($bolt-modal-breakpoint) {
    border-radius: $bolt-modal-border-radius;
  }
}

.c-bolt-modal__container-header,
.c-bolt-modal__container-footer,
.c-bolt-modal__container-body {
  display: block;

  // @todo [Mai] Normally, block level spacing gets cancelled out if it's the last child, but that does not work with slots. This is an interim solution for it.
  ::slotted(*:last-child),
  ::slotted(*.is-last-child) {
    margin-bottom: 0 !important;
  }
}

.c-bolt-modal__container-header,
.c-bolt-modal__container-footer {
  position: relative;
}

.c-bolt-modal__container-header {
  &:after {
    content: '';
    display: block;
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    transform: translateY(100%);
    height: bolt-v-spacing(xxsmall);
    pointer-events: none;
    background-image: linear-gradient(
      rgba(bolt-color(gray, light), 0.25),
      transparent
    );
  }
}

.c-bolt-modal__container-header--hidden {
  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-visuallyhidden;
  }
}

.c-bolt-modal__container-footer {
  &:before {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    transform: translateY(-100%);
    height: bolt-v-spacing(xxsmall);
    pointer-events: none;
    background-image: linear-gradient(
      transparent,
      rgba(bolt-color(gray, light), 0.25)
    );
  }
}

// Container spacing options
@each $spacing-value in $bolt-spacing-values {
  $spacing-value-name: nth($spacing-value, 1);

  @include bolt-mq($bolt-modal-breakpoint) {
    .c-bolt-modal__container--spacing-#{$spacing-value-name} {
      .c-bolt-modal__container-body {
        @include bolt-padding(#{$spacing-value-name});
      }

      .c-bolt-modal__container-header,
      .c-bolt-modal__container-footer {
        @include bolt-padding(#{$spacing-value-name}, squished);
      }
    }
  }
}

// Controls
.c-bolt-modal__close-button {
  @include bolt-z-index(modal);

  position: absolute;
  top: 0;
  right: 0;
  background-color: transparent;
  transition: background-color $bolt-modal-transition;

  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-border-radius(full);

    transform: translate3d(100%, -100%, 0);

    &:hover,
    &:focus-within {
      background-color: bolt-theme(background, 0.1);
    }
  }
}

// For IE which doesn't support :focus-within
.c-bolt-modal__close-button--focus-within {
  @include bolt-mq($bolt-modal-breakpoint) {
    background-color: bolt-theme(background, 0.1);
  }
}

.c-bolt-modal__close-button--hidden {
  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-visuallyhidden;
  }
}

.c-bolt-modal__close-button__text {
  @include bolt-visuallyhidden;
}

.c-bolt-modal__close-button__icon {
  display: block;
  position: relative;
  width: bolt-v-spacing(medium);
  height: bolt-v-spacing(medium);
  margin: bolt-v-spacing(small);

  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-margin(0);

    width: bolt-spacing(medium) - 0.2rem;
    height: bolt-spacing(medium) - 0.2rem;
  }

  &:before,
  &:after {
    content: '';
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: bolt-spacing(small);
    height: 2px;
    border-radius: $bolt-modal-border-radius;
    background-color: bolt-color(indigo, light);
    transform-origin: 50% 50%;

    /* .t-bolt-light &,
    .t-bolt-xlight & {
      background-color: bolt-color(indigo, light);
    }

    .t-bolt-dark &,
    .t-bolt-xdark & {
      background-color: bolt-color(white);
    } */

    @include bolt-mq($bolt-modal-breakpoint) {
      height: 0.1rem;
      background-color: bolt-color(white);

      .t-bolt-light &,
      .t-bolt-xlight & {
        background-color: bolt-color(white);
      }

      .t-bolt-dark &,
      .t-bolt-xdark & {
        background-color: bolt-color(indigo, light);
      }
    }
  }

  &:before {
    transform: translate3d(-50%, -50%, 0) rotate(45deg);
  }

  &:after {
    transform: translate3d(-50%, -50%, 0) rotate(-45deg);
  }
}

.c-bolt-modal__dialog-title {
  @include bolt-visuallyhidden;
}
