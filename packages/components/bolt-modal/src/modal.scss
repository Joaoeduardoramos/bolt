@import '@bolt/core';
@import '@bolt/global/styles/06-themes/_themes.all.scss';

/* ------------------------------------ *\
   Modal
   ---
   Based originally off of
   https://github.com/edenspiekermann/a11y-dialog
   before heavy modifications
   and customizations
\* ------------------------------------ */

/**
 * When `<dialog>` is properly supported, the overlay is implied and can be
 * styled with `::backdrop`, which means the DOM one should be removed.
 */
/*
[data-a11y-dialog-native] .dialog-overlay {
  @todo: look further into this to see why the natively supported ::backdrop wasn't showing up as expected
  display: none;
}

dialog::backdrop {
  background-color: rgba(0, 0, 0, 0.66);
}
*/

$bolt-modal-overlay-bg-color: rgba(bolt-color(indigo, xdark), bolt-opacity(80));
$bolt-modal-border-width: $bolt-border-width;
$bolt-modal-border-style: $bolt-border-style;
$bolt-modal-border-color: bolt-theme(text, 0.15);
$bolt-modal-border-radius: bolt-border-radius(small);
$bolt-modal-max-height: 80vh;
$bolt-modal-transition: $bolt-transition;
$bolt-modal-breakpoint: 'small';

// Hide all the non-trigger (button / link, etc) content inside the <bolt-modal> container before the JS kicks in
bolt-modal:not([ready]) {
  display: none;
}

.c-bolt-modal {
  display: inline;

  @include bolt-mq($until: $bolt-modal-breakpoint) {
    @include bolt-z-index(modalBG);

    display: block;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    visibility: hidden;
    opacity: 0;
    transform: scale(0.95);
    transition: all $bolt-modal-transition;

    [class*='t-bolt-'] {
      color: inherit;
      background-color: transparent;
    }

    .c-bolt-modal__overlay {
      display: none;
    }

    .c-bolt-modal__container {
      display: flex;
      flex-direction: column;
      height: 100vh;
      color: bolt-theme(text);
      background-color: bolt-theme(background);
    }

    .c-bolt-modal__container-header,
    .c-bolt-modal__container-footer {
      display: flex;
      align-items: center;
      min-height: bolt-v-spacing(medium);
    }

    .c-bolt-modal__container-header {
      @include bolt-padding(small large small small);
    }

    .c-bolt-modal__container-body {
      @include bolt-margin-top(auto);
      @include bolt-margin-bottom(auto);

      flex: 1;
      height: 100%;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }

    .c-bolt-modal__container-footer {
      @include bolt-padding(small);
    }

    [class*='c-bolt-modal__container--spacing-'] {
      .c-bolt-modal__container-body {
        @include bolt-padding(small);
      }
    }

    &.is-open {
      visibility: visible;
      opacity: 1;
      transform: scale(1);
      filter: blur(0);
    }
  }
}

// Dark overlay
.c-bolt-modal__overlay {
  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-z-index(modalBG);

    display: block;
    opacity: 0;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    pointer-events: none;
    background-color: $bolt-modal-overlay-bg-color;
    transition: opacity $bolt-modal-transition;
  }

  @at-root .c-bolt-modal.is-open #{&} {
    @include bolt-mq($bolt-modal-breakpoint) {
      opacity: 1;
      cursor: pointer;
      pointer-events: auto;
    }
  }

  @at-root .c-bolt-modal.is-open #{&}--persistent {
    @include bolt-mq($bolt-modal-breakpoint) {
      cursor: auto;
    }
  }
}


// Content box
.c-bolt-modal__content {
  display: block;
  width: 100%;
  margin: 0;
  padding: 0;
  border: 0;
  background: transparent;

  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-z-index(modal);

    visibility: hidden;
    opacity: 0;
    position: fixed;
    top: 0;
    left: 0;
    transition: all $bolt-modal-transition;

    max-width: calc(100% - #{bolt-spacing(medium) * 2});
    min-width: 200px; // Prevents content without defined width (such as image and video) from falling below 200px.
    max-height: $bolt-modal-max-height;
  }

  @at-root .c-bolt-modal.is-open #{&} {
    @include bolt-mq($bolt-modal-breakpoint) {
      visibility: visible;
      opacity: 1;
      filter: blur(0);
    }
  }
}

// Scroll options
@include bolt-mq($bolt-modal-breakpoint) {
  .c-bolt-modal--scroll-overall {
    @include bolt-z-index(modalBG);

    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    pointer-events: none;

    .c-bolt-modal__content {
      @include bolt-margin(0 auto);

      position: relative;
      top: 50vh;
      transform: translateX(0) translateY(-50%) scale(0.95);
    }

    &.is-open {
      pointer-events: auto;

      .c-bolt-modal__content {
        transform: translateX(0) translateY(calc(-50% - 0.5px)) translateZ(0);
      }
    }
  }

  .c-bolt-modal--scroll-container {
    .c-bolt-modal__content {
      top: 50%;
      left: 50%;
      transform: translateX(-50%) translateY(-50%) scale(0.95);
    }

    &.is-open {
      .c-bolt-modal__content {
        transform: translateX(calc(-50% - 0.5px)) translateY(calc(-50% - 0.5px)) translateZ(0);
      }
    }

    .c-bolt-modal__container-body {
      max-height: calc(#{$bolt-modal-max-height} - 6rem);
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    }
  }
}

// Content width options
@include bolt-mq($bolt-modal-breakpoint) {
  .c-bolt-modal__content--width-regular {
    width: 100% / 12 * 10;
  }

  .c-bolt-modal__content--width-optimal {
    width: 75ch;
  }

  .c-bolt-modal__content--width-full {
    width: calc(100% - #{bolt-spacing(medium) * 2});
  }
}

// Container
.c-bolt-modal__container {
  display: block;

  @include bolt-mq($bolt-modal-breakpoint) {
    border-radius: $bolt-modal-border-radius;
  }
}

.c-bolt-modal__container-header,
.c-bolt-modal__container-footer,
.c-bolt-modal__container-body {
  display: block;

  // @todo [Mai] Normally, block level spacing gets cancelled out if it's the last child, but that does not work with slots. This is an interim solution for it.
  ::slotted(*:last-child),
  ::slotted(*.is-last-child) {
    margin-bottom: 0 !important;
  }
}

.c-bolt-modal__container-header {
  border-bottom-color: $bolt-modal-border-color;
  border-bottom-style: $bolt-modal-border-style;
  border-bottom-width: $bolt-modal-border-width;
}

.c-bolt-modal__container-header--hidden {
  border-bottom-width: 0;

  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-visuallyhidden;
  }
}

.c-bolt-modal__container-footer {
  border-top-color: $bolt-modal-border-color;
  border-top-style: $bolt-modal-border-style;
  border-top-width: $bolt-modal-border-width;
}

// Container spacing options
@each $spacing-value in $bolt-spacing-values {
  $spacing-value-name: nth($spacing-value, 1);

  @include bolt-mq($bolt-modal-breakpoint) {
    .c-bolt-modal__container--spacing-#{$spacing-value-name} {
      .c-bolt-modal__container-body {
        @include bolt-padding(#{$spacing-value-name});
      }

      .c-bolt-modal__container-header,
      .c-bolt-modal__container-footer {
        @include bolt-padding(#{$spacing-value-name}, squished);
      }
    }
  }
}

// Controls
.c-bolt-modal__close-button {
  @include bolt-z-index(modal);

  position: absolute;
  top: 0;
  right: 0;

  @include bolt-mq($bolt-modal-breakpoint) {
    transform: translate3d(85%, -85%, 0);
  }
}

.c-bolt-modal__close-button--hidden {
  @include bolt-mq($bolt-modal-breakpoint) {
    @include bolt-visuallyhidden;
  }
}

.c-bolt-modal__dialog-title {
  @include bolt-visuallyhidden;
}
