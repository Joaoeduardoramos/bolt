{% set schema = bolt.data.components["@bolt-components-example"].schema %}

{% if enable_json_schema_validation %}
  {{ validate_data_schema(schema, _self)|raw }}
{% endif %}

{# Variables #}
{% set this = init(schema) %}
{% set inner_attributes = create_attribute({}) %}

{# Array of classes based on the defined + default props #}
{% set classes = [
  "c-bolt-example",
  this.data.spacing.value ? "c-bolt-example--spacing-" ~ this.data.spacing.value : "",
  this.data.borderless.value ? "c-bolt-example--borderless" : "",
] %}

{#
  Sort classes passed in via attributes into two groups:
  - Those that should be applied to the inner tag (namely, "is-" and "has-" classes)
  - Those that should be applied to the outer custom element (everything else EXCEPT c-bolt-* classes, which should never be passed in via attributes)
#}
{% set outer_classes = [] %}
{% set inner_classes = classes %}

{% for class in this.props.class %}
  {% if class starts with "is-" or class starts with "has-" %}
    {% set inner_classes = inner_classes|merge([class]) %}
  {% elseif class starts with "c-bolt-" == false %}
    {% set outer_classes = outer_classes|merge([class]) %}
  {% endif %}
{% endfor %}


<bolt-example
  {% if outer_classes %} class="{{ outer_classes|join(' ') }}" {% endif %}
  {{ this.props|without("content")|without("title")|without("class") }}
  >
  <replace-with-grandchildren {{ inner_attributes.addClass(inner_classes) }}>
    {#
      1. `title` will go into "title" slot. This pattern may be used for any slotted content, can be renamed depending upon your needs.
      2. `content` will go into "default" slot. Depending upon component, may be named something else, e.g. `text`, `items`, etc.
    #}
    {% if title %}
      <div class="c-bolt-example__title">
        {# [1] #}
        <div slot="title">{{ title }}</div>
      </div>
    {% endif %}

    <div class="c-bolt-example__content">
      {# [2] #}
      {{ content }}
    </div>
  </replace-with-grandchildren>
</bolt-example>
