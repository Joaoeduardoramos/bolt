

{% set schema = bolt.data.components["@bolt-components-button"].schema %}

{% if enable_json_schema_validation %}
  {{ validate_data_schema(schema, _self) | raw }}
{% endif %}

{# Variables #}
{% set this = init(schema) %}
{% set attributes = create_attribute(attributes|default({})) %}

{% set attributes = create_attribute(attributes|default({})) %}
{% set inner_attributes = create_attribute({}) %}

{# DEPRECATED.  Use the prooperty `align` instead of `itemAlignment`. #}
{% if itemAlignment %}
  {% set align = itemAlignment %}
{% endif %}

{# DEPRECATED.  Use the values `start` and `end` insted of `left` and `right`. #}
{% if align == "left" %}
  {% set align = "start" %}
{% elseif align == "right" %}
  {% set align = "end" %}
{% endif %}

{# DEPRECATED.  Use the property `border_radius` with a value of `full` instead. #}
{% if rounded == "rounded" %}
  {% set border_radius = "full" %}
{% endif %}

{# DEPRECATED. Use the `type` property for a reset or submit button.  Tag is determined automatically based on whether you pass a url. #}
{% if tag in ["reset", "submit"] %}
  {% set type = type|default(tag) %}
{% endif %}

{# Set up checks to validate that the component's prop values are allowed, based on the component's schema #}
{% set size_options = this.data.size.value %}
{% set style_options = this.data.style.value %}
{% set width_options = this.data.width.value %}
{% set border_radius_options = this.data.border_radius.value %}
{% set align_options = this.data.align.value %}
{% set transform_options = this.data.transform.value %}
{% set icon_positions = this.data.icon.properties.position.value %}
{% set iconOnly_options = this.data.iconOnly.value %}
{% set type_options = this.data.type.value %}

{# Check that the component's current prop values are valid. if not, default to the schema default #}
{{ this.data.size.default }}
{% set size = size in size_options ? size : schema.properties.size.default %}
{% set style = style in style_options ? style : schema.properties.style.default %}
{% set width = width in width_options ? width : schema.properties.width.default %}
{% set border_radius = border_radius in border_radius_options ? border_radius : schema.properties.border_radius.default %}
{% set align = align in align_options ? align : schema.properties.align.default %}
{% set transform = transform in transform_options ? transform : schema.properties.transform.default %}
{% set iconOnly = iconOnly is sameas(true) or iconOnly is sameas(false) ? iconOnly : scheuma.properties.iconOnly.default %}

{% if url != null %}
  {% set tag = "a" %}
  {% if disabled %}
    {% set inner_attributes = inner_attributes.setAttribute("aria-disabled", "true") %}
  {% else %}
    {% if url %}
      {% set inner_attributes = inner_attributes.setAttribute("href", url) %}
    {% endif %}
  {% endif %}
  {% if attributes.target %}
    {% set inner_attributes = inner_attributes.setAttribute("target", attributes.target) %}
  {% endif %}
{% else %}
  {% set tag = "button" %}

  {# Note that "type" does not have a default; unless an explicit value is specified, none will be set. #}
  {% if type in type_options %}
    {% set inner_attributes = inner_attributes.setAttribute("type", type ) %}
  {% endif %}
{% endif %}

{# Array of classes based on the defined + default props #}
{% set classes = [
  "c-bolt-button",
  disabled ? "c-bolt-button--disabled" : "",
  size ? "c-bolt-button--#{size}" : "",
  style ? "c-bolt-button--#{style}" : "",
  width != "auto" ? "c-bolt-button--#{width}" : "",
  border_radius ? "c-bolt-button--border-radius-#{border_radius}" : "",
  align ? "c-bolt-button--#{align}" : "",
  transform != "none" ? "c-bolt-button--#{transform}" : "",
  iconOnly ? "c-bolt-button--icon-only",
] %}

{% if disabled %}
  {% set attributes = attributes.setAttribute("disabled", true) %}
  {% if tag == "button" %}
    {% set inner_attributes = inner_attributes.setAttribute("disabled", true) %}
  {% endif %}
{% endif %}

{% if icon %}
  {% set icon_position = icon.position in icon_positions ? icon.position : schema.properties.icon.properties.position.default %}
{% endif %}


{#
Sort classes passed in via attributes into two groups:
1. Those that should be applied to the inner tag (namely, "is-" and "has-" classes)
2. Those that should be applied to the outer custom element (everything else EXCEPT c-bolt-* classes, which should never be passed in via atttributes)
#}
{% set outer_classes = [] %}
{% set inner_classes = classes %}
{% set original_classes = [] %}

{% for class in attributes["class"] %}
  {% if class starts with "is-" == true %}
    {% set inner_classes = inner_classes|merge([class]) %}
  {% elseif class starts with "has-" == true %}
    {% set inner_classes = inner_classes|merge([class]) %}
  {% elseif class starts with "c-bolt-button" == false %}
    {% set outer_classes = outer_classes|merge([class]) %}
  {% endif %}
  {% set original_classes = original_classes|merge([class]) %}
{% endfor %}

{% set attributes = attributes.removeClass(original_classes).addClass(outer_classes) %}
{% set inner_attributes = inner_attributes.removeClass(original_classes).addClass(inner_classes) %}

{% macro slottedIcon(icon, icon_position, slotName) %}
  {% if icon and icon_position == slotName %}
    <ssr-keep for="bolt-button" class="c-bolt-button__icon c-bolt-button__icon-sizer">
      {% set icon = icon | merge({
        attributes: {
          slot: slotName,
          class: icon.attributes.class | default([])
        }
      }) %}
      {% include "@bolt-components-icon/icon.twig" with icon only %}
    </ssr-keep>
  {% endif %}
{% endmacro %}

{% import _self as macros %}


{# choose a semantic <a> tag or <button> tag for better accessibility, depending on whether or not a url is getting passed along #}

<{{ tag }}
  {% if url %}
    href="{{ url }}"
    {% if target %}target="{{ target }}" {% endif %}
  {% else %}
    type="button"
  {% endif %}
  class="{{ classes|join(' ') }}"
  {{ attributes|without("url")|without("href")|without("target")|without("class") }}
  {{ inner_attributes|without("on-click")|without("on-click-target") }}
>

  {% block slot_before %}
    {{ macros.slottedIcon(icon, icon_position, "before") }}
  {% endblock %}
  <span class="c-bolt-button__item">test - {{ text }}</span>
  {% block slot_after %}
    {{ macros.slottedIcon(icon, icon_position, 'after') }}
  {% endblock %}

</{{ tag }}>
