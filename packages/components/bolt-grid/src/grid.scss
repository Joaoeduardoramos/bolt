/* ------------------------------------ *\
  CSS GRID
\* ------------------------------------ */

@import '@bolt/core';

@mixin bolt-support-grid-gap {
  @supports (grid-gap: 1px) {
    @content;
  }
}

.c-bolt-grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr); // 12-column grid is Bolt's default.
  grid-auto-rows: minmax(min-content, max-content);

  @each $name, $value in $bolt-spacing-values {
    &--gutter-#{$name} {
      margin-left: bolt-spacing(#{$name}) * -1;

      > bolt-grid-item {
        @include bolt-margin-left(#{$name});
      }

      @include bolt-support-grid-gap {
        grid-gap: bolt-spacing(#{$name});
        margin-left: 0;

        > bolt-grid-item {
          @include bolt-margin-left(0);
        }
      }
    }

    &--row-gutter-#{$name} {
      margin-top: bolt-v-spacing(#{$name}) * -1;

      > bolt-grid-item {
        @include bolt-margin-top(#{$name});
      }

      @include bolt-support-grid-gap {
        grid-row-gap: bolt-v-spacing(#{$name});
        margin-top: 0;

        > bolt-grid-item {
          @include bolt-margin-top(0);
        }
      }
    }
  }
}



$bolt-grid-item-alignments: (
  start, center, end
);

$bolt-grid-item-directions: (
  column, row
);

bolt-grid-item {
  display: block;
  width: auto;
  max-width: 100%;
  grid-row-start: auto;
  grid-row-end: auto;

  // auto-generate styles for declarative vertical and horizontal alignment of individual <bolt-grid-item>s
  @each $alignment in $bolt-grid-item-alignments {
    &[align='#{$alignment}']{
      justify-self: #{$alignment};
    }
  }

  @each $valignment in $bolt-grid-item-alignments {
    &[valign='#{$valignment}']{
      align-self: #{$valignment};
    }
  }


  // auto-generate styles for declarative rows and columns
  @each $direction in $bolt-grid-item-directions {
    // non-breakpoint variations of grid-column-start and grid-row-start
    @for $start-option from 1 through 12 {
      &[#{$direction}-start~='#{$start-option}']{
        grid-#{$direction}-start: #{$start-option};
      }
    }

    // non-breakpoint variations of grid-column-end and grid-row-end
    @for $end-option from 1 through 12 {
      &[#{$direction}-end~='#{$end-option}']{
        grid-#{$direction}-end: #{$end-option};
      }
    }

    // non-breakpoint span variations of grid-column-end and grid-row-end
    @for $option from 1 through 12 {
      &[#{$direction}-span~='#{$option}']{
        grid-#{$direction}-end: span #{$option};
      }
    }

    // breakpoint variations of grid-column-start and grid-row-start
    @each $breakpoint in $bolt-breakpoints {
      $breakpoint-name: nth($breakpoint, 1);
      @for $start-option from 1 through 12 {
        @include bolt-mq($breakpoint-name) {
          &[#{$direction}-start~='#{$start-option}\@#{$breakpoint-name}']{
            grid-#{$direction}-start: #{$start-option};
          }
        }
      }
    }


    @each $breakpoint in $bolt-breakpoints {
      $breakpoint-name: nth($breakpoint, 1);
      @for $end-option from 1 through 12 {
        @include bolt-mq($breakpoint-name) {
          &[#{$direction}-end~='#{$end-option}\@#{$breakpoint-name}']{
            grid-#{$direction}-end: #{$end-option};
          }
        }
      }
    }

    // breakpoint-specific span variations of grid-column-end and grid-row-end
    @each $breakpoint in $bolt-breakpoints {
      $breakpoint-name: nth($breakpoint, 1);
      @include bolt-mq($breakpoint-name) {
        @for $option from 1 through 12 {
          &[#{$direction}-span~='#{$option}\@#{$breakpoint-name}']{
            grid-#{$direction}-end: span #{$option};
          }
        }
      }
    }
  }
}
