@import '@bolt/core';

// only used in this one file so no sense moving this up a level to the main carousel variables file
@mixin bolt-calculate-slide-width($numberOfSlidesToDisplay) {
  flex-basis: calc(100% / #{$numberOfSlidesToDisplay} - calc(#{bolt-spacing(medium)}) * #{$numberOfSlidesToDisplay} - #{bolt-spacing(xsmall)});
  flex-basis: calc(100% / #{$numberOfSlidesToDisplay} - calc(var(--bolt-carousel-spacing) * #{$numberOfSlidesToDisplay}) - var(--bolt-carousel-space-around));
}

bolt-carousel-slide {
  display: flex;
  flex-basis: auto;
  flex-direction: row; // make sure children fill height of container
  flex-grow: 1;
  flex-shrink: 0;
  position: relative;
  z-index: 1;
  max-width: none;
  transition: transform 0.2s ease;
  scroll-snap-align: center;

  &:not(.is-ready) {
    flex-basis: calc(100% - var(--bolt-carousel-space-around));
  }

  &:not(.is-ready):not(:last-of-type) {
    @include bolt-margin-right(medium);

    bolt-carousel[space-between='small'] & {
      @include bolt-margin-right(small);
    }

    bolt-carousel[space-between='none'] & {
      @include bolt-margin-right(0);
    }

    bolt-carousel[space-between='large'] & {
      @include bolt-margin-right(large);
    }
  }

  &:only-child {
    width: 100%;
  }

  &:last-of-type {
    margin-right: 0 !important;
  }

  &:not(.is-ready) {
    @for $i from 1 to 5 {
      bolt-carousel[slides-per-view="#{$i}"] & {
        @include bolt-calculate-slide-width($i);
      }
    }

    @for $i from 2 to 8 {
      @if ($i == 2) {
        &:nth-last-of-type(n + #{$i}),
        &:nth-last-of-type(n + #{$i}) ~ bolt-carousel-slide {
          @include bolt-mq($from: 500px) {
            @include bolt-calculate-slide-width($i);
          }
        }
      } @else if ($i == 3) {
        &:nth-last-of-type(n + #{$i}),
        &:nth-last-of-type(n + #{$i}) ~ bolt-carousel-slide {
          @include bolt-mq($from: medium) {
            @include bolt-calculate-slide-width($i);
          }
        }
      } @else if ($i == 4) {
        &:nth-last-of-type(n + #{$i}),
        &:nth-last-of-type(n + #{$i}) ~ bolt-carousel-slide {
          @include bolt-mq($from: large) {
            @include bolt-calculate-slide-width($i);
          }
        }
      } @else if ($i > 4) {
        &:nth-last-of-type(n + #{$i}),
        &:nth-last-of-type(n + #{$i}) ~ bolt-carousel-slide {
          @include bolt-mq($from: xlarge) {
            @include bolt-calculate-slide-width($i);
          }
        }
      }
    }
  }

  bolt-card {
    flex-grow: 1;
  }
}

.c-bolt-carousel-slide,
.c-bolt-carousel__slide {
  flex-grow: 1;
  flex-shrink: 0;
  position: relative;
  width: 100%;
  transition: transform 0.3s ease, opacity 0.3s ease;

  .c-bolt-carousel--thumbnails & {
    opacity: 0.4;
    cursor: pointer;
  }

  &.c-bolt-carousel__slide--thumbnail-active {
    opacity: 1;
  }
}
