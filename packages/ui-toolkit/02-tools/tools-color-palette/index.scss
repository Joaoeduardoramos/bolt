/*------------------------------------*\
  Color Palette
\*------------------------------------*/

/**
  * Helper functions for applying global color swatches stored in Sass Maps
  */
@import '@bolt/settings-colors';
@import '@bolt/tools-sassy-maps'; //So map-get-deep works


@function palette($color, $tone: 'base') {
  @return map-get-deep($palettes, $color, $tone);
}

@function to-string($value) {
  @return inspect($value);
}

@function convert-color-map($map-old, $map-new, $override: true) {
  $case: 'lower-case';
  // Iterate through each value of the new map
  @each $key, $new-value in $map-new {
    // Check if that value already exists on the old map
    @if type-of($new-value) == map and type-of($key) != color and map-has-key($map-old, $key) {
      // There is an existing key
      $old-value: map-get($map-old, $key);
      @if type-of($new-value) == map and type-of($old-value) == map {
        // If both are maps, recurse regardless of $override
        $merged-value: convert-color-map($old-value, $new-value);
        $stringified-key: to-string($key);
        $new-key: call('to-' + $case, $stringified-key);
        $map-old: map-merge(map-remove($map-old, $key), (
          quote($new-key): $merged-value
        ));

      }@else{
        // Otherwise check $override
        @if $override{
          $stringified-key: to-string($key);
          $new-key: call("to-" + $case, $stringified-key);
          $map-old: map-merge(map-remove($map-old, $key), (
            quote($new-key): $new-value
          ));
        }
      }
    }@else{
      // There is no existing key so add
      $stringified-key: to-string($key);
      $new-key: call("to-" + $case, $stringified-key);

      $map-old: map-merge(map-remove($map-old, $key), (
        quote($new-key): $new-value
      ));
    }
  }
  @return $map-old;
}


/*
$color-text-link: palette(blue);
$color-text-link--var: var(--bolt-text-link-color, $color-text-link);

$color-text: palette(gray, xxdark);
$color-background: palette(white);
*/

@mixin color($name, $tone: 'base', $type: null) {
  $color: map-get-deep($palettes, $name, $tone);

  color: $color;

  @if $type == 'ui' {
    color: var(--bolt-color-ui-text, $color);
  }
  @elseif $type == 'link' {
    color: var(--bolt-color-link, $color);
  }
  @elseif $type == null {
    color: var(--bolt-color-text, $color);
  }
}

@mixin background-color($name, $tone: 'base', $type: null) {
  $background-color: map-get-deep($palettes, $name, $tone);

  background-color: $background-color;

  @if $type == 'ui' {
    background-color: var(--bolt-color-ui-background, $background-color);
  }
  @elseif $type == null {
    background-color: var(--bolt-color-background, $background-color);
  }
}

@mixin theme($name: 'xlight') {
  @if $name == 'xlight' {
    --bolt-color-text: palette(gray, xxdark);
    --bolt-color-background: palette(white);
    --bolt-color-link: palette(blue);
    --bolt-color-ui-text: palette(white);
    --bolt-color-ui-background: palette(blue);
  }
  @elseif $name == 'light' {
    --bolt-color-text: palette(gray, xxdark);
    --bolt-color-background: palette(gray, xlight);
    --bolt-color-link: palette(blue);
    --bolt-color-ui-text: palette(white);
    --bolt-color-ui-background: palette(blue);
  }
  @elseif $name == 'dark' {
    --bolt-color-text: palette(white);
    --bolt-color-background: palette(teal);
    --bolt-color-link: palette(blue, xlight);
    --bolt-color-ui-text: palette(white);
    --bolt-color-ui-background: palette(orange);
  }
  @elseif $name == 'xdark' {
    --bolt-color-text: palette(white);
    --bolt-color-background: palette(indigo);
    --bolt-color-link: palette(blue, xlight);
    --bolt-color-ui-text: palette(white);
    --bolt-color-ui-background: palette(blue);
  }
}

.testing {
  @include color(gray, xxdark);
  @include background-color(white);

  * {
    @include color(inherit);
    @include background-color(inherit);
  }


  /*@include color(yellow);*/
  /*@include color(yellow, dark);*/
  /*@include color(yellow, dark, ui);*/
  /*@include color(yellow, dark, link);*/


  /*@include background-color(teal);*/
  /*@include background-color(teal, xdark);*/
  /*@include background-color(teal, xdark, ui);*/
}

.mm-link {
  @include color(blue, base, link);
}

.mm-button {
  @include color(white, base, ui);
  @include background-color(blue, base, ui);

  padding: 1em;
}

.mm-button--secondary {
  @include color(white, base, ui);
  @include background-color(blue, base, ui);
}

.t-xlight {
  @include theme(xlight);

  padding: 2em;
}

.t-light {
  @include theme(light);

  padding: 2em;
}

.t-dark {
  @include theme(dark);

  padding: 2em;
}

.t-xdark {
  @include theme(xdark);

  padding: 2em;
}
