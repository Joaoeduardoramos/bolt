{% set usage %}{% verbatim %}
{% set content %}
  <bolt-text>Hello World!</bolt-text>
{% endset %}

{% include '@bolt-components-editor/editor.twig' with {
  styles: ['/build/bolt-global.css'],
  scripts: ['/build/bolt-global.js'],
  content: content,
} only %}
{% endverbatim %}{% endset %}

{% include "@utils/docs.twig" with {
  componentName: 'editor',
  usage: usage,
} only %}

<ul>
  <li><a href="{{ link['experiments-drupal-integration'] }}">Docs on Drupal Integration</a></li>
</ul>

<h3>Handlling editor save</h3>
<p>Assign a function to <code>window.__handleEditorSave</code> that will run the Drupal Save process 
and resolve with an object of <code>{ok: true/false, message: "Error: could not...." }</code>.</p>
<p>Note that we are not returning an error/reject, merely a <code>{ok: false}</code> if the Drupal axios
request fails. The included message will be displayed as an alert.  

<p>Here is the example handler, which should be overwritten on the window.     The <code>shouldThisFailDemo</code> var is togglable 
to simulate both events.   The <code>setTimeout()</code> is only necessary for simulating async, the production functionshould not include this.
</p>

<p>
<code>
function exampleHandleEditorSave({ html, id }) {
  const shouldThisFailToDemo = false;
  
  //TODO:  Drupal Axios code likely here 
  return new Promise((resolve, reject) => {
    // faking async delay
    setTimeout(() => {
      if (shouldThisFailToDemo) {
        console.log('exampleHandleEditorSave failed');
        resolve({
          ok: false,
          message: 'This is a demonstration of how to fail the save'
        });
      } else {
        console.log('exampleHandleEditorSave ok!');
        resolve({
          ok: true,
          message: 'Saved ok!',
        });
      }
    }, 2000);
  })
}
</code>
